// Generated by CoffeeScript 1.3.1
(function() {
  var MaPlot, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  MaPlot = function() {
    var allData, baseG, brush, brushOn, chart, colors, currentColor, dataTableSelection, displaySelected, filteredData, height, id, insideExtent, margin, opacity, pDomain, pScale, pValue, points, radius, setCutOff, setupSelectedTable, updateColor, width, xAxis, xDomain, xScale, xValue, yAxis, yCutOff, yCutOffDomain, yDomain, yScale, yValue;
    width = 600;
    height = 600;
    margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 40
    };
    xValue = function(d) {
      return parseFloat(d.a);
    };
    yValue = function(d) {
      return parseFloat(d.m);
    };
    pValue = function(d) {
      return parseFloat(d.p);
    };
    id = function(d) {
      return d.index;
    };
    yCutOff = 0.4;
    yCutOffDomain = [0, 5.0];
    radius = 3;
    opacity = 1.0;
    colors = {
      high_low: function(d) {
        if (yValue(d) > 1.0) {
          return "#A21705";
        } else if (yValue(d) < -1.0) {
          return "#87A205";
        } else {
          return "#ccc";
        }
      },
      p_value: function(d) {
        return pScale(pValue(d));
      },
      none: function(d) {
        return "#ccc";
      }
    };
    currentColor = "high_low";
    dataTableSelection = "#data-list";
    baseG = null;
    points = null;
    allData = [];
    filteredData = [];
    xScale = d3.scale.linear().range([0, width]);
    yScale = d3.scale.linear().range([0, height]);
    pScale = d3.scale.linear().range(["#BDD7E7", "#08519C"]);
    xDomain = function(data) {
      return d3.extent(data, xValue);
    };
    yDomain = function(data) {
      return d3.extent(data, yValue).reverse();
    };
    pDomain = function(data) {
      return d3.extent(data, pValue).reverse();
    };
    xAxis = d3.svg.axis().scale(xScale).orient("bottom");
    yAxis = d3.svg.axis().scale(yScale).orient("left");
    insideExtent = function(extent, d) {
      return extent[0][0] <= xValue(d) && xValue(d) <= extent[1][0] && extent[0][1] <= yValue(d) && yValue(d) <= extent[1][1];
    };
    updateColor = function(point_set) {
      var e;
      e = brush.extent();
      return point_set.attr("fill", function(d) {
        if (insideExtent(e, d)) {
          return "blue";
        } else {
          return colors[currentColor](d);
        }
      });
    };
    brushOn = function(p) {
      var all_points, e, eventTarget, selected_points;
      eventTarget = d3.select(d3.event.target);
      e = brush.extent();
      all_points = points.selectAll("circle");
      selected_points = all_points.filter(function(d) {
        return insideExtent(e, d);
      });
      updateColor(all_points);
      return displaySelected(selected_points);
    };
    brush = d3.svg.brush().on("brush", brushOn);
    setCutOff = function() {
      var extent, max;
      extent = yDomain(allData);
      max = d3.max(extent.map(function(d) {
        return Math.abs(d);
      }));
      yCutOff = max / 8.0;
      return yCutOffDomain = [0, max];
    };
    chart = function(selection) {
      return selection.each(function(data) {
        var gEnter, svg;
        allData = data;
        setCutOff();
        xScale.domain(xDomain(data));
        yScale.domain(yDomain(data));
        pScale.domain(pDomain(allData));
        brush.x(xScale).y(yScale);
        svg = d3.select(this).selectAll("svg").data([data]);
        gEnter = svg.enter().append("svg").append("g");
        svg.attr("width", width + margin.left + margin.right);
        svg.attr("height", height + margin.top + margin.bottom);
        baseG = svg.select("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        baseG.append("g").attr("class", "x axis").attr("transform", "translate(" + 0 + "," + height + ")").call(xAxis);
        baseG.append("g").attr("class", "y axis").attr("transform", "translate(" + 0 + "," + 0 + ")").call(yAxis);
        points = baseG.append("g").attr("class", "points");
        chart.update();
        baseG.append("g").attr("class", "brush").call(brush);
        return setupSelectedTable(d3.keys(data[0]));
      });
    };
    chart.update = function() {
      var newPoints;
      filteredData = chart.filter(allData);
      newPoints = points.selectAll("circle").data(filteredData, function(d) {
        return id(d);
      });
      newPoints.exit().remove();
      newPoints.enter().append("circle").attr("class", "point").attr("cx", function(d) {
        return xScale(xValue(d));
      }).attr("cy", function(d) {
        return yScale(yValue(d));
      }).attr("r", radius).attr("fill-opacity", opacity);
      return updateColor(newPoints);
    };
    chart.filter = function(data) {
      var fd;
      fd = data.filter(function(d) {
        return Math.abs(yValue(d)) > yCutOff;
      });
      return fd;
    };
    setupSelectedTable = function(keys) {
      var head, table;
      table = d3.select(dataTableSelection).append("table").attr("class", "table table-condensed table-striped");
      head = table.append("thead").append("tr");
      head.selectAll("th").data(keys).enter().append("th").text(function(d) {
        return d;
      });
      return table.append("tbody");
    };
    displaySelected = function(selected_points) {
      var selected_data, selectionRow;
      selected_data = [];
      selected_points.each(function(d) {
        return selected_data.push(d);
      });
      selectionRow = d3.select(dataTableSelection).select("table tbody").selectAll("tr").data(selected_data, function(d) {
        return id(d);
      });
      selectionRow.exit().remove();
      return selectionRow.enter().append("tr").html(function(d, i) {
        return "<td>" + d3.values(d).join("</td><td>") + "</td>";
      });
    };
    chart.height = function(_) {
      if (!arguments.length) {
        return height;
      }
      height = _;
      return chart;
    };
    chart.width = function(_) {
      if (!arguments.length) {
        return width;
      }
      width = _;
      return chart;
    };
    chart.margin = function(_) {
      if (!arguments.length) {
        return margin;
      }
      margin = _;
      return chart;
    };
    chart.radius = function(_) {
      if (!arguments.length) {
        return radius;
      }
      radius = _;
      return chart;
    };
    chart.color = function(_) {
      if (!arguments.length) {
        return currentColor;
      }
      currentColor = _;
      return chart;
    };
    chart.all_colors = function() {
      return d3.keys(colors);
    };
    chart.x = function(_) {
      if (!arguments.length) {
        return xValue;
      }
      xValue = _;
      return chart;
    };
    chart.y = function(_) {
      if (!arguments.length) {
        return yValue;
      }
      yValue = _;
      return chart;
    };
    chart.p = function(_) {
      if (!arguments.length) {
        return pValue;
      }
      pValue = _;
      return chart;
    };
    chart.cutoff = function(_) {
      if (!arguments.length) {
        return yCutOff;
      }
      yCutOff = _;
      return chart;
    };
    chart.cutoff_domain = function(_) {
      if (!arguments.length) {
        return yCutOffDomain;
      }
      yCutOffDomain = _;
      return chart;
    };
    chart.y_domain = function(_) {
      if (!arguments.length) {
        return yDomain;
      }
      yDomain = _;
      return chart;
    };
    chart.id = function(_) {
      if (!arguments.length) {
        return id;
      }
      id = _;
      return chart;
    };
    chart.data = function(_) {
      if (!arguments.length) {
        return allData;
      }
      allData = _;
      return chart;
    };
    return chart;
  };

  root.MaPlot = MaPlot;

  root.plotData = function(selector, data, plot) {
    return d3.select(selector).datum(data).call(plot);
  };

}).call(this);
